/** A common versions file, which can be used across different modules*/

ext.deps = [:]
def versions = [:]
versions.kotlin= '1.3.50'
versions.constraint_layout = '2.0.0-beta1'
versions.android_gradle_plugin = '3.5.0'
versions.appcompat = "1.1.0-rc01"
versions.coroutinesVersion = "1.3.0-RC"
versions.support = "1.0.0"
versions.supportLibraryVersion = '1.1.0'
versions.gsonVersion = '2.8.2'
versions.okhttp = '3.10.0'
versions.retrofit = '2.6.0'
versions.navigationVersion = '2.0.0'
versions.daggerVersion = "2.16"
versions.glideVersion = "4.9.0"
versions.lifecycleVersion = "2.2.0-alpha02"
versions.pagingVersion = "2.1.0"
versions.okhttp_logging_interceptor = "3.9.0"
versions.core_ktx = "1.0.0"
versions.junit = "4.12"
versions.extJUnit = "1.1.2-alpha02"
versions.test_core = "1.2.0"
versions.test_junit = "1.1.1"
versions.test_rules = "1.2.0"
versions.test_runner = "1.2.0"
versions.pagingVersion = "2.1.0"
ext.versions = versions

def support = [:]
support.annotations = "androidx.annotation:annotation:${versions.support}"
support.app_compat = "androidx.appcompat:appcompat:${versions.appcompat}"
support.recyclerview = "androidx.recyclerview:recyclerview:${versions.support}"
support.design = "com.google.android.material:material:${versions.support}"
support.core_utils = "androidx.legacy:legacy-support-core-utils:${versions.support}"
support.core_ktx = "androidx.core:core-ktx:${versions.core_ktx}"
support.paging = "androidx.paging:paging-runtime:${versions.pagingVersion}"
deps.support = support


def kotlin = [:]
kotlin.stdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"
kotlin.test = "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}"
kotlin.plugin = "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
kotlin.allopen = "org.jetbrains.kotlin:kotlin-allopen:${versions.kotlin}"
deps.kotlin = kotlin

def coroutines = [:]
coroutines.android = "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutinesVersion}"
coroutines.core = "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutinesVersion}"
deps.coroutines = coroutines

def glide = [:]
glide.core = "com.github.bumptech.glide:glide:${versions.glideVersion}"
glide.compiler = "com.github.bumptech.glide:compiler:${versions.glideVersion}"
deps.glide = glide

def network = [:]
network.retrofit = "com.squareup.retrofit2:retrofit:${versions.retrofit}"
network.gson = "com.squareup.retrofit2:converter-gson:${versions.retrofit}"
network.mock = "com.squareup.retrofit2:retrofit-mock:${versions.retrofit}"
network.okhttp_logging_interceptor = "com.squareup.okhttp3:logging-interceptor:${versions.okhttp_logging_interceptor}"
deps.network = network

def dagger = [:]
dagger.android = "com.google.dagger:dagger-android:${versions.daggerVersion}"
dagger.android_support = "com.google.dagger:dagger-android-support:${versions.daggerVersion}"
dagger.compiler = "com.google.dagger:dagger-compiler:${versions.daggerVersion}"
dagger.android_support_compiler = "com.google.dagger:dagger-android-processor:${versions.daggerVersion}"
deps.dagger = dagger

def lifecycle = [:]
lifecycle.ext = "androidx.lifecycle:lifecycle-extensions:${versions.lifecycleVersion}"
lifecycle.livedata = "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycleVersion}"
lifecycle.viewmodel = "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycleVersion}"
deps.lifecycle = lifecycle

def test = [:]
test.core = "androidx.test:core:${versions.test_core}"
test.ext_junit = "androidx.test.ext:junit:${versions.test_junit}"
test.runner = "androidx.test:runner:${versions.test_runner}"
test.rules = "androidx.test:rules:${versions.test_rules}"
deps.test = test

deps.android_gradle_plugin = "com.android.tools.build:gradle:${versions.android_gradle_plugin}"
deps.constraint_layout = "androidx.constraintlayout:constraintlayout:${versions.constraint_layout}"
deps.junit = "junit:junit:${versions.junit}"


def build_versions = [:]
build_versions.min_sdk = 19
build_versions.target_sdk = 29
build_versions.build_tools = "29.0.2"
ext.build_versions = build_versions

ext.deps = deps

def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
}

ext.addRepos = this.&addRepos